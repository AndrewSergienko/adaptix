*******************
Integrations
*******************

This article describes how adaptix is workings with other packages and systems.

.. _supported-model-kinds:

Supported model kinds
=======================

Models are classes that have a predefined set of fields. Adaptix process models in the same, consistent way.

Models that are supported out of the box:

- `dataclass <https://docs.python.org/3/library/dataclasses>`_
- `NamedTuple <https://docs.python.org/3/library/typing.html#typing.NamedTuple>`_
  (`namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_
  also is supported, but types of all fields will be ``Any``)
- `TypedDict <https://docs.python.org/3/library/typing.html#typing.TypedDict>`_
- `attrs <https://www.attrs.org/en/stable/>`_ (only from ``>=21.3.0``)
- `sqlalchemy <https://docs.sqlalchemy.org/en/20/>`_ (only from ``>=2.0.0``)

Arbitrary types also are supported to be loaded by introspection of ``__init__`` method,
but it can not be dumped.

You do not need to do anything to enable support for models from a third-party library.
Everything just works. But you can install adaptix with certain `extras <https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras>`_
to ensure version compatibility.


Known limitations:

- dataclass

  - Signature of custom ``__init__`` method must be same as signature of generated by ``@dataclass``,
    because there is no way to distinguish them.


- ``__init__`` introspection or using :func:`.constructor`

  - Fields of unpacked typed dict (``**kwargs: Unpack[YourTypedDict]``) cannot collide with parameters of function.

- sqlalchemy

  - Only mapping to ``Table`` is supported,
    implementations for ``FromClause`` instances such as ``Subquery`` and ``Join`` are not provided.

  - Mapping to ``dataclass`` and ``attrs`` are not supported.

  - It does not support registering order of mapped fields by design,
    so you should use manual mapping to list instead automatic ``as_list=True``.

  - Relationships with custom ``collection_class`` are not supported.

  - All input fields of foreign keys and relationships are considered as optional
    due to user can pass only relationship instance or only foreign key value.


Due to the way Python works with annotations, there is a `bug <https://github.com/python/cpython/issues/97727>`_,
when field annotation of ``TypedDict`` is stringified or ``from __future__ import annotations`` is placed
in file ``Required`` and ``NotRequired`` specifiers is ignored
when ``required_keys`` and ``optional_keys`` is calculated.
Adaptix takes this into account and processes it properly.
