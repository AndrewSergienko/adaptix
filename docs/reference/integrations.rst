*******************
Integrations
*******************

This article describes how adaptix is workings with other packages and systems.

.. _supported-model-kinds:

Supported model kinds
=======================

Models are classes that have a predefined set of fields. Adaptix process models in the same, consistent way.

Models that are supported out of the box:

- `dataclass <https://docs.python.org/3/library/dataclasses>`_
- `NamedTuple <https://docs.python.org/3/library/typing.html#typing.NamedTuple>`_
  (`namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_
  also is supported, but types of all fields will be ``Any``)
- `TypedDict <https://docs.python.org/3/library/typing.html#typing.TypedDict>`_
- `attrs <https://www.attrs.org/en/stable/>`_ (only from ``>=21.3.0``)

Arbitrary types also are supported to be loaded by introspection of ``__init__`` method,
but it can not be dumped.

You do not need to do anything to enable support for models from a third-party library.
Everything just works. But you can install adaptix with certain `extras <https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras>`_
to ensure version compatibility.


Known limitations:

- dataclass

  - Signature of custom ``__init__`` method must be same as signature of generated by ``@dataclass``,
    because there is no way to distinguish them.


- ``__init__`` introspection or using :func:`.constructor`

  - Fields of unpacked typed dict (``**kwargs: Unpack[YourTypedDict]``) cannot collide with parameters of function

